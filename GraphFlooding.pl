#! /usr/bin/perl
use strict;
use FindBin;
use lib "$FindBin::Bin/.";
use GraphJG::SimilarityJG;


my %templateGraphs = {};

my $TieneVerbProsodic = Graph->new(multiedged => 1);
$TieneVerbProsodic->set_graph_attribute("name", "TieneVerbProsodic");
$TieneVerbProsodic->add_edge_by_id("desmeme", "length", "STRICTURE");
$TieneVerbProsodic->add_edge_by_id("length", "Mora", "CONSTITUENT");
$TieneVerbProsodic->add_edge_by_id("length", "COUNT2-1", "COUNT");
$TieneVerbProsodic->add_edge_by_id("desmeme", "prosodicConditioning", "CONDITIONING");
$TieneVerbProsodic->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$TieneVerbProsodic->add_edge_by_id("potentiallyViolable", "noKnownExceptions", "EXCEPTIONALITY");
$TieneVerbProsodic->add_edge_by_id("potentiallyViolable", "shortening", "REPARABILITY");
$TieneVerbProsodic->add_edge_by_id("desmeme", "span", "FOUNDATION");
$TieneVerbProsodic->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$TieneVerbProsodic->add_edge_by_id("component1", "open1", "FILLEDNESS");
$TieneVerbProsodic->add_edge_by_id("open1", "coherent1", "COHERENCE");
$TieneVerbProsodic->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$TieneVerbProsodic->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$TieneVerbProsodic->add_edge_by_id("component1", "stable1", "STABILITY");
$TieneVerbProsodic->add_edge_by_id("span", "component2", "RIGHT_SUPPORT");
$TieneVerbProsodic->add_edge_by_id("component2", "open2", "FILLEDNESS");
$TieneVerbProsodic->add_edge_by_id("open2", "coherent2", "COHERENCE");
$TieneVerbProsodic->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$TieneVerbProsodic->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$TieneVerbProsodic->add_edge_by_id("component2", "stable2", "STABILITY");
$templateGraphs{TieneVerbProsodic} = $TieneVerbProsodic;

my $EnglishPlural = Graph->new(multiedged => 1);
$EnglishPlural->set_graph_attribute("name", "EnglishPlural");
$EnglishPlural->add_edge_by_id("desmeme", "order", "STRICTURE");
$EnglishPlural->add_edge_by_id("order", "simple", "RELATIONS");
$EnglishPlural->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$EnglishPlural->add_edge_by_id("order", "COUNT2-1", "COUNT");
$EnglishPlural->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$EnglishPlural->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$EnglishPlural->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$EnglishPlural->add_edge_by_id("component1", "filled1", "FILLEDNESS");
$EnglishPlural->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$EnglishPlural->add_edge_by_id("component1", "stable1", "STABILITY");
$EnglishPlural->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$EnglishPlural->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$EnglishPlural->add_edge_by_id("lexicoconstructionalConditioning", "final1", "FILLER_POSITION");
$EnglishPlural->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$EnglishPlural->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$EnglishPlural->add_edge_by_id("arch", "component2", "KEYSTONE");
$EnglishPlural->add_edge_by_id("component2", "open1", "FILLEDNESS");
$EnglishPlural->add_edge_by_id("open1", "coherent1", "COHERENCE");
$EnglishPlural->add_edge_by_id("component2", "stable2", "STABILITY");
$EnglishPlural->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$EnglishPlural->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$EnglishPlural->add_edge_by_id("arch", "component1", "RIGHT_VOUSSOIR");
$EnglishPlural->add_edge_by_id("arch", "component1", "RIGHT_SUPPORT");
$EnglishPlural->add_edge_by_id("arch", "component3", "LEFT_VOUSSOIR");
$EnglishPlural->add_edge_by_id("component3", "null1", "FILLEDNESS");
$EnglishPlural->add_edge_by_id("component3", "stable3", "STABILITY");
$EnglishPlural->add_edge_by_id("component3", "inelastic3", "ELASTICITY");
$EnglishPlural->add_edge_by_id("inelastic3", "COUNT0-1", "COUNT");
$EnglishPlural->add_edge_by_id("arch", "component3", "LEFT_SUPPORT");
$templateGraphs{EnglishPlural} = $EnglishPlural;

my $BantuCA = Graph->new(multiedged => 1);
$BantuCA->set_graph_attribute("name", "BantuCA");
$BantuCA->add_edge_by_id("desmeme", "order", "STRICTURE");
$BantuCA->add_edge_by_id("order", "simple", "RELATIONS");
$BantuCA->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$BantuCA->add_edge_by_id("order", "COUNT3-1", "COUNT");
$BantuCA->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$BantuCA->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$BantuCA->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$BantuCA->add_edge_by_id("component1", "filled1", "FILLEDNESS");
$BantuCA->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$BantuCA->add_edge_by_id("component1", "stable1", "STABILITY");
$BantuCA->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$BantuCA->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$BantuCA->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$BantuCA->add_edge_by_id("filledComponentSet", "component2", "FILLED_COMPONENT");
$BantuCA->add_edge_by_id("component2", "filled2", "FILLEDNESS");
$BantuCA->add_edge_by_id("filled2", "canonicalLineate2", "FORM");
$BantuCA->add_edge_by_id("component2", "stable2", "STABILITY");
$BantuCA->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$BantuCA->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$BantuCA->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$BantuCA->add_edge_by_id("lexicoconstructionalConditioning", "multiple", "FILLER_POSITION");
$BantuCA->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$BantuCA->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$BantuCA->add_edge_by_id("arch", "component3", "KEYSTONE");
$BantuCA->add_edge_by_id("component3", "open1", "FILLEDNESS");
$BantuCA->add_edge_by_id("open1", "coherent1", "COHERENCE");
$BantuCA->add_edge_by_id("component3", "stable3", "STABILITY");
$BantuCA->add_edge_by_id("component3", "inelastic1", "ELASTICITY");
$BantuCA->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$BantuCA->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$BantuCA->add_edge_by_id("arch", "component1", "RIGHT_SUPPORT");
$BantuCA->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$BantuCA->add_edge_by_id("component4", "null1", "FILLEDNESS");
$BantuCA->add_edge_by_id("component4", "stable4", "STABILITY");
$BantuCA->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$BantuCA->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$BantuCA->add_edge_by_id("arch", "component3", "LEFT_SUPPORT");
$templateGraphs{BantuCA} = $BantuCA;

my $TieneVerbSegments = Graph->new(multiedged => 1);
$TieneVerbSegments->set_graph_attribute("name", "TieneVerbSegments");
$TieneVerbSegments->add_edge_by_id("desmeme", "order", "STRICTURE");
$TieneVerbSegments->add_edge_by_id("order", "simple", "RELATIONS");
$TieneVerbSegments->add_edge_by_id("order", "segment", "CONSTITUENT");
$TieneVerbSegments->add_edge_by_id("order", "COUNT3-1", "COUNT");
$TieneVerbSegments->add_edge_by_id("desmeme", "prosodicConditioning", "CONDITIONING");
$TieneVerbSegments->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$TieneVerbSegments->add_edge_by_id("potentiallyViolable", "noKnownExceptions", "EXCEPTIONALITY");
$TieneVerbSegments->add_edge_by_id("potentiallyViolable", "phonologicalRepair", "REPARABILITY");
$TieneVerbSegments->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$TieneVerbSegments->add_edge_by_id("arch", "component1", "KEYSTONE");
$TieneVerbSegments->add_edge_by_id("component1", "open1", "FILLEDNESS");
$TieneVerbSegments->add_edge_by_id("open1", "coherent1", "COHERENCE");
$TieneVerbSegments->add_edge_by_id("component1", "stable1", "STABILITY");
$TieneVerbSegments->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$TieneVerbSegments->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$TieneVerbSegments->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$TieneVerbSegments->add_edge_by_id("component2", "open2", "FILLEDNESS");
$TieneVerbSegments->add_edge_by_id("open2", "coherent2", "COHERENCE");
$TieneVerbSegments->add_edge_by_id("component2", "unstable1", "STABILITY");
$TieneVerbSegments->add_edge_by_id("unstable1", "right", "ASSOCIATE_POSITION");
$TieneVerbSegments->add_edge_by_id("unstable1", "component3", "ASSOCIATE");
$TieneVerbSegments->add_edge_by_id("component3", "open3", "FILLEDNESS");
$TieneVerbSegments->add_edge_by_id("open3", "coherent3", "COHERENCE");
$TieneVerbSegments->add_edge_by_id("component3", "unstable2", "STABILITY");
$TieneVerbSegments->add_edge_by_id("unstable2", "left", "ASSOCIATE_POSITION");
$TieneVerbSegments->add_edge_by_id("unstable2", "component2", "ASSOCIATE");
$TieneVerbSegments->add_edge_by_id("component3", "elastic1", "ELASTICITY");
$TieneVerbSegments->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$TieneVerbSegments->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$TieneVerbSegments->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$TieneVerbSegments->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$TieneVerbSegments->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$TieneVerbSegments->add_edge_by_id("arch", "component3", "RIGHT_SUPPORT");
$TieneVerbSegments->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$TieneVerbSegments->add_edge_by_id("component4", "null1", "FILLEDNESS");
$TieneVerbSegments->add_edge_by_id("component4", "stable2", "STABILITY");
$TieneVerbSegments->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$TieneVerbSegments->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$TieneVerbSegments->add_edge_by_id("arch", "component1", "LEFT_SUPPORT");
$templateGraphs{TieneVerbSegments} = $TieneVerbSegments;

my $ChechenPreverbalA = Graph->new(multiedged => 1);
$ChechenPreverbalA->set_graph_attribute("name", "ChechenPreverbalA");
$ChechenPreverbalA->add_edge_by_id("desmeme", "length", "STRICTURE");
$ChechenPreverbalA->add_edge_by_id("length", "prosodicWord", "CONSTITUENT");
$ChechenPreverbalA->add_edge_by_id("length", "COUNT2-1", "COUNT");
$ChechenPreverbalA->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$ChechenPreverbalA->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$ChechenPreverbalA->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$ChechenPreverbalA->add_edge_by_id("component1", "partiallyFilled1", "FILLEDNESS");
$ChechenPreverbalA->add_edge_by_id("partiallyFilled1", "canonicalLineate1", "FORM");
$ChechenPreverbalA->add_edge_by_id("partiallyFilled1", "final1", "FILLER_PLACEMENT");
$ChechenPreverbalA->add_edge_by_id("partiallyFilled1", "incoherent1", "COHERENCE");
$ChechenPreverbalA->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$ChechenPreverbalA->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$ChechenPreverbalA->add_edge_by_id("component1", "stable1", "STABILITY");
$ChechenPreverbalA->add_edge_by_id("lexicoconstructionalConditioning", "medial", "FILLER_POSITION");
$ChechenPreverbalA->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$ChechenPreverbalA->add_edge_by_id("potentiallyViolable", "noKnownExceptions", "EXCEPTIONALITY");
$ChechenPreverbalA->add_edge_by_id("potentiallyViolable", "morphosyntacticInsertion", "REPARABILITY");
$ChechenPreverbalA->add_edge_by_id("desmeme", "span", "FOUNDATION");
$ChechenPreverbalA->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$ChechenPreverbalA->add_edge_by_id("span", "component2", "RIGHT_SUPPORT");
$ChechenPreverbalA->add_edge_by_id("component2", "open1", "FILLEDNESS");
$ChechenPreverbalA->add_edge_by_id("open1", "coherent1", "COHERENCE");
$ChechenPreverbalA->add_edge_by_id("component2", "stable2", "STABILITY");
$ChechenPreverbalA->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$ChechenPreverbalA->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$templateGraphs{ChechenPreverbalA} = $ChechenPreverbalA;

my $MandeClause = Graph->new(multiedged => 1);
$MandeClause->set_graph_attribute("name", "MandeClause");
$MandeClause->add_edge_by_id("desmeme", "order", "STRICTURE");
$MandeClause->add_edge_by_id("order", "simple", "RELATIONS");
$MandeClause->add_edge_by_id("order", "syntacticConstituent", "CONSTITUENT");
$MandeClause->add_edge_by_id("order", "COUNT5-1", "COUNT");
$MandeClause->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$MandeClause->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$MandeClause->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$MandeClause->add_edge_by_id("arch", "component1", "KEYSTONE");
$MandeClause->add_edge_by_id("component1", "open1", "FILLEDNESS");
$MandeClause->add_edge_by_id("open1", "coherent1", "COHERENCE");
$MandeClause->add_edge_by_id("component1", "stable1", "STABILITY");
$MandeClause->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$MandeClause->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$MandeClause->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$MandeClause->add_edge_by_id("component2", "open2", "FILLEDNESS");
$MandeClause->add_edge_by_id("open2", "incoherent1", "COHERENCE");
$MandeClause->add_edge_by_id("component2", "stable2", "STABILITY");
$MandeClause->add_edge_by_id("component2", "elastic1", "ELASTICITY");
$MandeClause->add_edge_by_id("elastic1", "MAXIMUM100-1", "MAXIMUM");
$MandeClause->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$MandeClause->add_edge_by_id("arch", "component2", "RIGHT_SUPPORT");
$MandeClause->add_edge_by_id("arch", "component3", "LEFT_VOUSSOIR");
$MandeClause->add_edge_by_id("component3", "open3", "FILLEDNESS");
$MandeClause->add_edge_by_id("open3", "coherent2", "COHERENCE");
$MandeClause->add_edge_by_id("component3", "stable3", "STABILITY");
$MandeClause->add_edge_by_id("component3", "elastic2", "ELASTICITY");
$MandeClause->add_edge_by_id("elastic2", "MAXIMUM1-1", "MAXIMUM");
$MandeClause->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$MandeClause->add_edge_by_id("arch", "restkomponentenSet", "RESTKOMPONENTEN");
$MandeClause->add_edge_by_id("restkomponentenSet", "component4", "RESTKOMPONENT");
$MandeClause->add_edge_by_id("component4", "open4", "FILLEDNESS");
$MandeClause->add_edge_by_id("open4", "coherent3", "COHERENCE");
$MandeClause->add_edge_by_id("component4", "stable4", "STABILITY");
$MandeClause->add_edge_by_id("component4", "elastic3", "ELASTICITY");
$MandeClause->add_edge_by_id("elastic3", "MAXIMUM1-2", "MAXIMUM");
$MandeClause->add_edge_by_id("elastic3", "MINIMUM0-3", "MINIMUM");
$MandeClause->add_edge_by_id("arch", "component5", "LEFT_SUPPORT");
$MandeClause->add_edge_by_id("component5", "open5", "FILLEDNESS");
$MandeClause->add_edge_by_id("open5", "coherent4", "COHERENCE");
$MandeClause->add_edge_by_id("component5", "stable5", "STABILITY");
$MandeClause->add_edge_by_id("component5", "inelastic2", "ELASTICITY");
$MandeClause->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$templateGraphs{MandeClause} = $MandeClause;

my $EnglishVP = Graph->new(multiedged => 1);
$EnglishVP->set_graph_attribute("name", "EnglishVP");
$EnglishVP->add_edge_by_id("desmeme", "order", "STRICTURE");
$EnglishVP->add_edge_by_id("order", "simple", "RELATIONS");
$EnglishVP->add_edge_by_id("order", "syntacticConstituent", "CONSTITUENT");
$EnglishVP->add_edge_by_id("order", "COUNT3-1", "COUNT");
$EnglishVP->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$EnglishVP->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$EnglishVP->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$EnglishVP->add_edge_by_id("arch", "component1", "KEYSTONE");
$EnglishVP->add_edge_by_id("component1", "open1", "FILLEDNESS");
$EnglishVP->add_edge_by_id("open1", "coherent1", "COHERENCE");
$EnglishVP->add_edge_by_id("component1", "stable1", "STABILITY");
$EnglishVP->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$EnglishVP->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$EnglishVP->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$EnglishVP->add_edge_by_id("component2", "open2", "FILLEDNESS");
$EnglishVP->add_edge_by_id("open2", "coherent2", "COHERENCE");
$EnglishVP->add_edge_by_id("component2", "stable2", "STABILITY");
$EnglishVP->add_edge_by_id("component2", "elastic1", "ELASTICITY");
$EnglishVP->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$EnglishVP->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$EnglishVP->add_edge_by_id("arch", "component3", "RIGHT_SUPPORT");
$EnglishVP->add_edge_by_id("component3", "open3", "FILLEDNESS");
$EnglishVP->add_edge_by_id("open3", "coherent3", "COHERENCE");
$EnglishVP->add_edge_by_id("component3", "stable3", "STABILITY");
$EnglishVP->add_edge_by_id("component3", "elastic2", "ELASTICITY");
$EnglishVP->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$EnglishVP->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$EnglishVP->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$EnglishVP->add_edge_by_id("component4", "null1", "FILLEDNESS");
$EnglishVP->add_edge_by_id("component4", "stable4", "STABILITY");
$EnglishVP->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$EnglishVP->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$EnglishVP->add_edge_by_id("arch", "component4", "LEFT_SUPPORT");
$templateGraphs{EnglishVP} = $EnglishVP;

my $MeskwakiClause = Graph->new(multiedged => 1);
$MeskwakiClause->set_graph_attribute("name", "MeskwakiClause");
$MeskwakiClause->add_edge_by_id("desmeme", "order", "STRICTURE");
$MeskwakiClause->add_edge_by_id("order", "simple", "RELATIONS");
$MeskwakiClause->add_edge_by_id("order", "syntacticConstituent", "CONSTITUENT");
$MeskwakiClause->add_edge_by_id("order", "COUNT5-1", "COUNT");
$MeskwakiClause->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$MeskwakiClause->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$MeskwakiClause->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$MeskwakiClause->add_edge_by_id("arch", "component1", "KEYSTONE");
$MeskwakiClause->add_edge_by_id("component1", "open1", "FILLEDNESS");
$MeskwakiClause->add_edge_by_id("open1", "coherent1", "COHERENCE");
$MeskwakiClause->add_edge_by_id("component1", "stable1", "STABILITY");
$MeskwakiClause->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$MeskwakiClause->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$MeskwakiClause->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$MeskwakiClause->add_edge_by_id("component2", "open2", "FILLEDNESS");
$MeskwakiClause->add_edge_by_id("open2", "coherent2", "COHERENCE");
$MeskwakiClause->add_edge_by_id("component2", "stable2", "STABILITY");
$MeskwakiClause->add_edge_by_id("component2", "elastic1", "ELASTICITY");
$MeskwakiClause->add_edge_by_id("elastic1", "MAXIMUM100-1", "MAXIMUM");
$MeskwakiClause->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$MeskwakiClause->add_edge_by_id("arch", "component2", "RIGHT_SUPPORT");
$MeskwakiClause->add_edge_by_id("arch", "component3", "LEFT_VOUSSOIR");
$MeskwakiClause->add_edge_by_id("component3", "open3", "FILLEDNESS");
$MeskwakiClause->add_edge_by_id("open3", "coherent3", "COHERENCE");
$MeskwakiClause->add_edge_by_id("component3", "stable3", "STABILITY");
$MeskwakiClause->add_edge_by_id("component3", "elastic2", "ELASTICITY");
$MeskwakiClause->add_edge_by_id("elastic2", "MAXIMUM1-1", "MAXIMUM");
$MeskwakiClause->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$MeskwakiClause->add_edge_by_id("arch", "restkomponentenSet", "RESTKOMPONENTEN");
$MeskwakiClause->add_edge_by_id("restkomponentenSet", "component4", "RESTKOMPONENT");
$MeskwakiClause->add_edge_by_id("component4", "open4", "FILLEDNESS");
$MeskwakiClause->add_edge_by_id("open4", "coherent4", "COHERENCE");
$MeskwakiClause->add_edge_by_id("component4", "stable4", "STABILITY");
$MeskwakiClause->add_edge_by_id("component4", "elastic3", "ELASTICITY");
$MeskwakiClause->add_edge_by_id("elastic3", "MAXIMUM1-2", "MAXIMUM");
$MeskwakiClause->add_edge_by_id("elastic3", "MINIMUM0-3", "MINIMUM");
$MeskwakiClause->add_edge_by_id("arch", "component5", "LEFT_SUPPORT");
$MeskwakiClause->add_edge_by_id("component5", "open5", "FILLEDNESS");
$MeskwakiClause->add_edge_by_id("open5", "coherent5", "COHERENCE");
$MeskwakiClause->add_edge_by_id("component5", "unstable1", "STABILITY");
$MeskwakiClause->add_edge_by_id("unstable1", "right", "ASSOCIATE_POSITION");
$MeskwakiClause->add_edge_by_id("unstable1", "component1", "ASSOCIATE");
$MeskwakiClause->add_edge_by_id("component5", "elastic4", "ELASTICITY");
$MeskwakiClause->add_edge_by_id("elastic4", "MAXIMUM1-3", "MAXIMUM");
$MeskwakiClause->add_edge_by_id("elastic4", "MINIMUM0-4", "MINIMUM");
$templateGraphs{MeskwakiClause} = $MeskwakiClause;

my $ChichewaAR = Graph->new(multiedged => 1);
$ChichewaAR->set_graph_attribute("name", "ChichewaAR");
$ChichewaAR->add_edge_by_id("desmeme", "order", "STRICTURE");
$ChichewaAR->add_edge_by_id("order", "simple", "RELATIONS");
$ChichewaAR->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$ChichewaAR->add_edge_by_id("order", "COUNT2-1", "COUNT");
$ChichewaAR->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$ChichewaAR->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$ChichewaAR->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$ChichewaAR->add_edge_by_id("component1", "filled1", "FILLEDNESS");
$ChichewaAR->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$ChichewaAR->add_edge_by_id("component1", "stable1", "STABILITY");
$ChichewaAR->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$ChichewaAR->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$ChichewaAR->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$ChichewaAR->add_edge_by_id("filledComponentSet", "component2", "FILLED_COMPONENT");
$ChichewaAR->add_edge_by_id("component2", "filled2", "FILLEDNESS");
$ChichewaAR->add_edge_by_id("filled2", "canonicalLineate2", "FORM");
$ChichewaAR->add_edge_by_id("component2", "stable2", "STABILITY");
$ChichewaAR->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$ChichewaAR->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$ChichewaAR->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$ChichewaAR->add_edge_by_id("lexicoconstructionalConditioning", "multiple", "FILLER_POSITION");
$ChichewaAR->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$ChichewaAR->add_edge_by_id("potentiallyViolable", "semantic", "EXCEPTIONALITY");
$ChichewaAR->add_edge_by_id("potentiallyViolable", "morphosyntacticInsertion", "REPARABILITY");
$ChichewaAR->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$ChichewaAR->add_edge_by_id("arch", "component3", "KEYSTONE");
$ChichewaAR->add_edge_by_id("component3", "open1", "FILLEDNESS");
$ChichewaAR->add_edge_by_id("open1", "coherent1", "COHERENCE");
$ChichewaAR->add_edge_by_id("component3", "stable3", "STABILITY");
$ChichewaAR->add_edge_by_id("component3", "inelastic1", "ELASTICITY");
$ChichewaAR->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$ChichewaAR->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$ChichewaAR->add_edge_by_id("arch", "component1", "RIGHT_SUPPORT");
$ChichewaAR->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$ChichewaAR->add_edge_by_id("component4", "null1", "FILLEDNESS");
$ChichewaAR->add_edge_by_id("component4", "stable4", "STABILITY");
$ChichewaAR->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$ChichewaAR->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$ChichewaAR->add_edge_by_id("arch", "component3", "LEFT_SUPPORT");
$templateGraphs{ChichewaAR} = $ChichewaAR;

my $TurkishVerbalMinimality = Graph->new(multiedged => 1);
$TurkishVerbalMinimality->set_graph_attribute("name", "TurkishVerbalMinimality");
$TurkishVerbalMinimality->add_edge_by_id("desmeme", "length", "STRICTURE");
$TurkishVerbalMinimality->add_edge_by_id("length", "Syllable", "CONSTITUENT");
$TurkishVerbalMinimality->add_edge_by_id("length", "COUNT2-1", "COUNT");
$TurkishVerbalMinimality->add_edge_by_id("desmeme", "prosodicConditioning", "CONDITIONING");
$TurkishVerbalMinimality->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$TurkishVerbalMinimality->add_edge_by_id("potentiallyViolable", "lexical", "EXCEPTIONALITY");
$TurkishVerbalMinimality->add_edge_by_id("potentiallyViolable", "morphosyntacticInsertion", "REPARABILITY");
$TurkishVerbalMinimality->add_edge_by_id("desmeme", "span", "FOUNDATION");
$TurkishVerbalMinimality->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$TurkishVerbalMinimality->add_edge_by_id("component1", "open1", "FILLEDNESS");
$TurkishVerbalMinimality->add_edge_by_id("open1", "coherent1", "COHERENCE");
$TurkishVerbalMinimality->add_edge_by_id("component1", "stable1", "STABILITY");
$TurkishVerbalMinimality->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$TurkishVerbalMinimality->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$TurkishVerbalMinimality->add_edge_by_id("span", "component2", "RIGHT_SUPPORT");
$TurkishVerbalMinimality->add_edge_by_id("component2", "open2", "FILLEDNESS");
$TurkishVerbalMinimality->add_edge_by_id("open2", "coherent2", "COHERENCE");
$TurkishVerbalMinimality->add_edge_by_id("component2", "stable2", "STABILITY");
$TurkishVerbalMinimality->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$TurkishVerbalMinimality->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$templateGraphs{TurkishVerbalMinimality} = $TurkishVerbalMinimality;

my $TurkishNominalMinimality = Graph->new(multiedged => 1);
$TurkishNominalMinimality->set_graph_attribute("name", "TurkishNominalMinimality");
$TurkishNominalMinimality->add_edge_by_id("desmeme", "length", "STRICTURE");
$TurkishNominalMinimality->add_edge_by_id("length", "Syllable", "CONSTITUENT");
$TurkishNominalMinimality->add_edge_by_id("length", "COUNT2-1", "COUNT");
$TurkishNominalMinimality->add_edge_by_id("desmeme", "prosodicConditioning", "CONDITIONING");
$TurkishNominalMinimality->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$TurkishNominalMinimality->add_edge_by_id("potentiallyViolable", "lexical", "EXCEPTIONALITY");
$TurkishNominalMinimality->add_edge_by_id("potentiallyViolable", "irreparable", "REPARABILITY");
$TurkishNominalMinimality->add_edge_by_id("desmeme", "span", "FOUNDATION");
$TurkishNominalMinimality->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$TurkishNominalMinimality->add_edge_by_id("component1", "open1", "FILLEDNESS");
$TurkishNominalMinimality->add_edge_by_id("open1", "coherent1", "COHERENCE");
$TurkishNominalMinimality->add_edge_by_id("component1", "stable1", "STABILITY");
$TurkishNominalMinimality->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$TurkishNominalMinimality->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$TurkishNominalMinimality->add_edge_by_id("span", "component2", "RIGHT_SUPPORT");
$TurkishNominalMinimality->add_edge_by_id("component2", "open2", "FILLEDNESS");
$TurkishNominalMinimality->add_edge_by_id("open2", "coherent2", "COHERENCE");
$TurkishNominalMinimality->add_edge_by_id("component2", "stable2", "STABILITY");
$TurkishNominalMinimality->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$TurkishNominalMinimality->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$templateGraphs{TurkishNominalMinimality} = $TurkishNominalMinimality;

my $GermanClause = Graph->new(multiedged => 1);
$GermanClause->set_graph_attribute("name", "GermanClause");
$GermanClause->add_edge_by_id("desmeme", "order", "STRICTURE");
$GermanClause->add_edge_by_id("order", "taxonomic", "RELATIONS");
$GermanClause->add_edge_by_id("order", "syntacticConstituent", "CONSTITUENT");
$GermanClause->add_edge_by_id("order", "COUNT5-1", "COUNT");
$GermanClause->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$GermanClause->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$GermanClause->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$GermanClause->add_edge_by_id("arch", "component1", "KEYSTONE");
$GermanClause->add_edge_by_id("component1", "open1", "FILLEDNESS");
$GermanClause->add_edge_by_id("open1", "incoherent1", "COHERENCE");
$GermanClause->add_edge_by_id("component1", "unstable1", "STABILITY");
$GermanClause->add_edge_by_id("unstable1", "right", "ASSOCIATE_POSITION");
$GermanClause->add_edge_by_id("unstable1", "component2", "ASSOCIATE");
$GermanClause->add_edge_by_id("component2", "open2", "FILLEDNESS");
$GermanClause->add_edge_by_id("open2", "incoherent2", "COHERENCE");
$GermanClause->add_edge_by_id("component2", "unstable2", "STABILITY");
$GermanClause->add_edge_by_id("unstable2", "left", "ASSOCIATE_POSITION");
$GermanClause->add_edge_by_id("unstable2", "component1", "ASSOCIATE");
$GermanClause->add_edge_by_id("component2", "elastic1", "ELASTICITY");
$GermanClause->add_edge_by_id("elastic1", "MAXIMUM100-1", "MAXIMUM");
$GermanClause->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$GermanClause->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$GermanClause->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$GermanClause->add_edge_by_id("arch", "component3", "RIGHT_VOUSSOIR");
$GermanClause->add_edge_by_id("component3", "open3", "FILLEDNESS");
$GermanClause->add_edge_by_id("open3", "incoherent3", "COHERENCE");
$GermanClause->add_edge_by_id("component3", "stable1", "STABILITY");
$GermanClause->add_edge_by_id("component3", "elastic2", "ELASTICITY");
$GermanClause->add_edge_by_id("elastic2", "MAXIMUM100-2", "MAXIMUM");
$GermanClause->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$GermanClause->add_edge_by_id("arch", "component4", "RIGHT_SUPPORT");
$GermanClause->add_edge_by_id("component4", "open4", "FILLEDNESS");
$GermanClause->add_edge_by_id("open4", "incoherent4", "COHERENCE");
$GermanClause->add_edge_by_id("component4", "stable2", "STABILITY");
$GermanClause->add_edge_by_id("component4", "elastic3", "ELASTICITY");
$GermanClause->add_edge_by_id("elastic3", "MAXIMUM100-3", "MAXIMUM");
$GermanClause->add_edge_by_id("elastic3", "MINIMUM0-3", "MINIMUM");
$GermanClause->add_edge_by_id("arch", "component5", "LEFT_VOUSSOIR");
$GermanClause->add_edge_by_id("component5", "open5", "FILLEDNESS");
$GermanClause->add_edge_by_id("open5", "incoherent5", "COHERENCE");
$GermanClause->add_edge_by_id("component5", "unstable3", "STABILITY");
$GermanClause->add_edge_by_id("unstable3", "right", "ASSOCIATE_POSITION");
$GermanClause->add_edge_by_id("unstable3", "component1", "ASSOCIATE");
$GermanClause->add_edge_by_id("component5", "elastic4", "ELASTICITY");
$GermanClause->add_edge_by_id("elastic4", "MAXIMUM1-1", "MAXIMUM");
$GermanClause->add_edge_by_id("elastic4", "MINIMUM0-4", "MINIMUM");
$GermanClause->add_edge_by_id("arch", "restkomponentenSet", "RESTKOMPONENTEN");
$GermanClause->add_edge_by_id("restkomponentenSet", "component2", "RESTKOMPONENT");
$GermanClause->add_edge_by_id("arch", "component5", "LEFT_SUPPORT");
$templateGraphs{GermanClause} = $GermanClause;

my $NimboranVerb = Graph->new(multiedged => 1);
$NimboranVerb->set_graph_attribute("name", "NimboranVerb");
$NimboranVerb->add_edge_by_id("desmeme", "order", "STRICTURE");
$NimboranVerb->add_edge_by_id("order", "taxonomic", "RELATIONS");
$NimboranVerb->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$NimboranVerb->add_edge_by_id("order", "COUNT7-1", "COUNT");
$NimboranVerb->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$NimboranVerb->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$NimboranVerb->add_edge_by_id("potentiallyViolable", "noKnownExceptions", "EXCEPTIONALITY");
$NimboranVerb->add_edge_by_id("potentiallyViolable", "homophony", "REPARABILITY");
$NimboranVerb->add_edge_by_id("desmeme", "span", "FOUNDATION");
$NimboranVerb->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$NimboranVerb->add_edge_by_id("component1", "open1", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("open1", "incoherent1", "COHERENCE");
$NimboranVerb->add_edge_by_id("component1", "stable1", "STABILITY");
$NimboranVerb->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$NimboranVerb->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$NimboranVerb->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$NimboranVerb->add_edge_by_id("span", "restkomponentenSet", "RESTKOMPONENTEN");
$NimboranVerb->add_edge_by_id("restkomponentenSet", "component2", "RESTKOMPONENT");
$NimboranVerb->add_edge_by_id("component2", "filled1", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$NimboranVerb->add_edge_by_id("component2", "stable2", "STABILITY");
$NimboranVerb->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$NimboranVerb->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$NimboranVerb->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$NimboranVerb->add_edge_by_id("restkomponentenSet", "component3", "RESTKOMPONENT");
$NimboranVerb->add_edge_by_id("component3", "filled2", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("filled2", "canonicalLineate2", "FORM");
$NimboranVerb->add_edge_by_id("component3", "stable3", "STABILITY");
$NimboranVerb->add_edge_by_id("component3", "elastic3", "ELASTICITY");
$NimboranVerb->add_edge_by_id("elastic3", "MAXIMUM1-3", "MAXIMUM");
$NimboranVerb->add_edge_by_id("elastic3", "MINIMUM0-3", "MINIMUM");
$NimboranVerb->add_edge_by_id("restkomponentenSet", "component4", "RESTKOMPONENT");
$NimboranVerb->add_edge_by_id("component4", "open2", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("open2", "coherent1", "COHERENCE");
$NimboranVerb->add_edge_by_id("component4", "stable4", "STABILITY");
$NimboranVerb->add_edge_by_id("component4", "elastic4", "ELASTICITY");
$NimboranVerb->add_edge_by_id("elastic4", "MAXIMUM1-4", "MAXIMUM");
$NimboranVerb->add_edge_by_id("elastic4", "MINIMUM0-4", "MINIMUM");
$NimboranVerb->add_edge_by_id("restkomponentenSet", "component5", "RESTKOMPONENT");
$NimboranVerb->add_edge_by_id("component5", "open3", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("open3", "coherent2", "COHERENCE");
$NimboranVerb->add_edge_by_id("component5", "unstable1", "STABILITY");
$NimboranVerb->add_edge_by_id("unstable1", "left", "ASSOCIATE_POSITION");
$NimboranVerb->add_edge_by_id("unstable1", "component4", "ASSOCIATE");
$NimboranVerb->add_edge_by_id("component5", "inelastic1", "ELASTICITY");
$NimboranVerb->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$NimboranVerb->add_edge_by_id("restkomponentenSet", "component6", "RESTKOMPONENT");
$NimboranVerb->add_edge_by_id("component6", "elastic5", "ELASTICITY");
$NimboranVerb->add_edge_by_id("elastic5", "MAXIMUM1-5", "MAXIMUM");
$NimboranVerb->add_edge_by_id("elastic5", "MINIMUM0-5", "MINIMUM");
$NimboranVerb->add_edge_by_id("component6", "stable5", "STABILITY");
$NimboranVerb->add_edge_by_id("component6", "filled3", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("filled3", "canonicalLineate3", "FORM");
$NimboranVerb->add_edge_by_id("span", "component7", "RIGHT_SUPPORT");
$NimboranVerb->add_edge_by_id("component7", "open4", "FILLEDNESS");
$NimboranVerb->add_edge_by_id("open4", "coherent3", "COHERENCE");
$NimboranVerb->add_edge_by_id("component7", "stable6", "STABILITY");
$NimboranVerb->add_edge_by_id("component7", "inelastic2", "ELASTICITY");
$NimboranVerb->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$templateGraphs{NimboranVerb} = $NimboranVerb;

my $AghemClause = Graph->new(multiedged => 1);
$AghemClause->set_graph_attribute("name", "AghemClause");
$AghemClause->add_edge_by_id("desmeme", "order", "STRICTURE");
$AghemClause->add_edge_by_id("order", "simple", "RELATIONS");
$AghemClause->add_edge_by_id("order", "syntacticConstituent", "CONSTITUENT");
$AghemClause->add_edge_by_id("order", "COUNT6-1", "COUNT");
$AghemClause->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$AghemClause->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$AghemClause->add_edge_by_id("potentiallyViolable", "lexical", "EXCEPTIONALITY");
$AghemClause->add_edge_by_id("potentiallyViolable", "morphosyntacticInsertion", "REPARABILITY");
$AghemClause->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$AghemClause->add_edge_by_id("arch", "component1", "KEYSTONE");
$AghemClause->add_edge_by_id("component1", "open1", "FILLEDNESS");
$AghemClause->add_edge_by_id("open1", "coherent1", "COHERENCE");
$AghemClause->add_edge_by_id("component1", "stable1", "STABILITY");
$AghemClause->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$AghemClause->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$AghemClause->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$AghemClause->add_edge_by_id("component2", "open2", "FILLEDNESS");
$AghemClause->add_edge_by_id("open2", "coherent2", "COHERENCE");
$AghemClause->add_edge_by_id("component2", "unstable1", "STABILITY");
$AghemClause->add_edge_by_id("unstable1", "left", "ASSOCIATE_POSITION");
$AghemClause->add_edge_by_id("unstable1", "component3", "ASSOCIATE");
$AghemClause->add_edge_by_id("component3", "open3", "FILLEDNESS");
$AghemClause->add_edge_by_id("open3", "coherent3", "COHERENCE");
$AghemClause->add_edge_by_id("component3", "stable2", "STABILITY");
$AghemClause->add_edge_by_id("component3", "elastic1", "ELASTICITY");
$AghemClause->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$AghemClause->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$AghemClause->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$AghemClause->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$AghemClause->add_edge_by_id("arch", "component4", "RIGHT_SUPPORT");
$AghemClause->add_edge_by_id("component4", "open4", "FILLEDNESS");
$AghemClause->add_edge_by_id("open4", "coherent4", "COHERENCE");
$AghemClause->add_edge_by_id("component4", "stable3", "STABILITY");
$AghemClause->add_edge_by_id("component4", "elastic2", "ELASTICITY");
$AghemClause->add_edge_by_id("elastic2", "MAXIMUM100-1", "MAXIMUM");
$AghemClause->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$AghemClause->add_edge_by_id("arch", "component5", "LEFT_VOUSSOIR");
$AghemClause->add_edge_by_id("component5", "open5", "FILLEDNESS");
$AghemClause->add_edge_by_id("open5", "coherent5", "COHERENCE");
$AghemClause->add_edge_by_id("component5", "stable4", "STABILITY");
$AghemClause->add_edge_by_id("component5", "elastic3", "ELASTICITY");
$AghemClause->add_edge_by_id("elastic3", "MAXIMUM100-2", "MAXIMUM");
$AghemClause->add_edge_by_id("elastic3", "MINIMUM0-3", "MINIMUM");
$AghemClause->add_edge_by_id("arch", "restkomponentenSet", "RESTKOMPONENTEN");
$AghemClause->add_edge_by_id("restkomponentenSet", "component3", "RESTKOMPONENT");
$AghemClause->add_edge_by_id("arch", "component6", "LEFT_SUPPORT");
$AghemClause->add_edge_by_id("component6", "open6", "FILLEDNESS");
$AghemClause->add_edge_by_id("open6", "coherent6", "COHERENCE");
$AghemClause->add_edge_by_id("component6", "stable5", "STABILITY");
$AghemClause->add_edge_by_id("component6", "inelastic3", "ELASTICITY");
$AghemClause->add_edge_by_id("inelastic3", "COUNT1-3", "COUNT");
$templateGraphs{AghemClause} = $AghemClause;

my $BantuVCy = Graph->new(multiedged => 1);
$BantuVCy->set_graph_attribute("name", "BantuVCy");
$BantuVCy->add_edge_by_id("desmeme", "order", "STRICTURE");
$BantuVCy->add_edge_by_id("order", "simple", "RELATIONS");
$BantuVCy->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$BantuVCy->add_edge_by_id("order", "COUNT3-1", "COUNT");
$BantuVCy->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$BantuVCy->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$BantuVCy->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$BantuVCy->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$BantuVCy->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$BantuVCy->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$BantuVCy->add_edge_by_id("component1", "stable1", "STABILITY");
$BantuVCy->add_edge_by_id("component1", "filled1", "FILLEDNESS");
$BantuVCy->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$BantuVCy->add_edge_by_id("lexicoconstructionalConditioning", "final1", "FILLER_POSITION");
$BantuVCy->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$BantuVCy->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$BantuVCy->add_edge_by_id("arch", "component2", "KEYSTONE");
$BantuVCy->add_edge_by_id("component2", "open1", "FILLEDNESS");
$BantuVCy->add_edge_by_id("open1", "coherent1", "COHERENCE");
$BantuVCy->add_edge_by_id("component2", "stable2", "STABILITY");
$BantuVCy->add_edge_by_id("component2", "inelastic1", "ELASTICITY");
$BantuVCy->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$BantuVCy->add_edge_by_id("arch", "component3", "RIGHT_VOUSSOIR");
$BantuVCy->add_edge_by_id("component3", "open2", "FILLEDNESS");
$BantuVCy->add_edge_by_id("open2", "coherent2", "COHERENCE");
$BantuVCy->add_edge_by_id("component3", "stable3", "STABILITY");
$BantuVCy->add_edge_by_id("component3", "elastic2", "ELASTICITY");
$BantuVCy->add_edge_by_id("elastic2", "MAXIMUM100-1", "MAXIMUM");
$BantuVCy->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$BantuVCy->add_edge_by_id("arch", "component1", "RIGHT_SUPPORT");
$BantuVCy->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$BantuVCy->add_edge_by_id("component4", "null1", "FILLEDNESS");
$BantuVCy->add_edge_by_id("component4", "stable4", "STABILITY");
$BantuVCy->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$BantuVCy->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$BantuVCy->add_edge_by_id("arch", "component2", "LEFT_SUPPORT");
$templateGraphs{BantuVCy} = $BantuVCy;

my $ChintangPrefixes = Graph->new(multiedged => 1);
$ChintangPrefixes->set_graph_attribute("name", "ChintangPrefixes");
$ChintangPrefixes->add_edge_by_id("desmeme", "order", "STRICTURE");
$ChintangPrefixes->add_edge_by_id("order", "simple", "RELATIONS");
$ChintangPrefixes->add_edge_by_id("order", "prosodicWord", "CONSTITUENT");
$ChintangPrefixes->add_edge_by_id("order", "COUNT2-1", "COUNT");
$ChintangPrefixes->add_edge_by_id("desmeme", "constructionalConditioning", "CONDITIONING");
$ChintangPrefixes->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$ChintangPrefixes->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$ChintangPrefixes->add_edge_by_id("arch", "component1", "KEYSTONE");
$ChintangPrefixes->add_edge_by_id("component1", "open1", "FILLEDNESS");
$ChintangPrefixes->add_edge_by_id("open1", "coherent1", "COHERENCE");
$ChintangPrefixes->add_edge_by_id("component1", "stable1", "STABILITY");
$ChintangPrefixes->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$ChintangPrefixes->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$ChintangPrefixes->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$ChintangPrefixes->add_edge_by_id("component2", "open2", "FILLEDNESS");
$ChintangPrefixes->add_edge_by_id("open2", "coherent2", "COHERENCE");
$ChintangPrefixes->add_edge_by_id("component2", "stable2", "STABILITY");
$ChintangPrefixes->add_edge_by_id("component2", "inelastic2", "ELASTICITY");
$ChintangPrefixes->add_edge_by_id("inelastic2", "COUNT1-2", "COUNT");
$ChintangPrefixes->add_edge_by_id("arch", "component2", "RIGHT_SUPPORT");
$ChintangPrefixes->add_edge_by_id("arch", "component3", "LEFT_VOUSSOIR");
$ChintangPrefixes->add_edge_by_id("component3", "null1", "FILLEDNESS");
$ChintangPrefixes->add_edge_by_id("component3", "stable3", "STABILITY");
$ChintangPrefixes->add_edge_by_id("component3", "inelastic3", "ELASTICITY");
$ChintangPrefixes->add_edge_by_id("inelastic3", "COUNT0-1", "COUNT");
$ChintangPrefixes->add_edge_by_id("arch", "component1", "LEFT_SUPPORT");
$templateGraphs{ChintangPrefixes} = $ChintangPrefixes;

my $SerboCroatianJe = Graph->new(multiedged => 1);
$SerboCroatianJe->set_graph_attribute("name", "SerboCroatianJe");
$SerboCroatianJe->add_edge_by_id("desmeme", "order", "STRICTURE");
$SerboCroatianJe->add_edge_by_id("order", "simple", "RELATIONS");
$SerboCroatianJe->add_edge_by_id("order", "prosodicWord", "CONSTITUENT");
$SerboCroatianJe->add_edge_by_id("order", "COUNT2-1", "COUNT");
$SerboCroatianJe->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$SerboCroatianJe->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$SerboCroatianJe->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$SerboCroatianJe->add_edge_by_id("component1", "partiallyFilled1", "FILLEDNESS");
$SerboCroatianJe->add_edge_by_id("partiallyFilled1", "final1", "FILLER_PLACEMENT");
$SerboCroatianJe->add_edge_by_id("partiallyFilled1", "incoherent1", "COHERENCE");
$SerboCroatianJe->add_edge_by_id("partiallyFilled1", "embeddedDesmeme", "FORM");
$SerboCroatianJe->add_edge_by_id("component1", "stable1", "STABILITY");
$SerboCroatianJe->add_edge_by_id("component1", "inelastic1", "ELASTICITY");
$SerboCroatianJe->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$SerboCroatianJe->add_edge_by_id("lexicoconstructionalConditioning", "medial", "FILLER_POSITION");
$SerboCroatianJe->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$SerboCroatianJe->add_edge_by_id("desmeme", "span", "FOUNDATION");
$SerboCroatianJe->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$SerboCroatianJe->add_edge_by_id("span", "component2", "RIGHT_SUPPORT");
$SerboCroatianJe->add_edge_by_id("component2", "open1", "FILLEDNESS");
$SerboCroatianJe->add_edge_by_id("open1", "incoherent2", "COHERENCE");
$SerboCroatianJe->add_edge_by_id("component2", "stable2", "STABILITY");
$SerboCroatianJe->add_edge_by_id("component2", "elastic1", "ELASTICITY");
$SerboCroatianJe->add_edge_by_id("elastic1", "MAXIMUM100-1", "MAXIMUM");
$SerboCroatianJe->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$templateGraphs{SerboCroatianJe} = $SerboCroatianJe;

my $NdebeleCA = Graph->new(multiedged => 1);
$NdebeleCA->set_graph_attribute("name", "NdebeleCA");
$NdebeleCA->add_edge_by_id("desmeme", "order", "STRICTURE");
$NdebeleCA->add_edge_by_id("order", "simple", "RELATIONS");
$NdebeleCA->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$NdebeleCA->add_edge_by_id("order", "COUNT4-1", "COUNT");
$NdebeleCA->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$NdebeleCA->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$NdebeleCA->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$NdebeleCA->add_edge_by_id("component1", "filled1", "FILLEDNESS");
$NdebeleCA->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$NdebeleCA->add_edge_by_id("component1", "stable1", "STABILITY");
$NdebeleCA->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$NdebeleCA->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$NdebeleCA->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$NdebeleCA->add_edge_by_id("filledComponentSet", "component2", "FILLED_COMPONENT");
$NdebeleCA->add_edge_by_id("component2", "filled2", "FILLEDNESS");
$NdebeleCA->add_edge_by_id("filled2", "canonicalLineate2", "FORM");
$NdebeleCA->add_edge_by_id("component2", "stable2", "STABILITY");
$NdebeleCA->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$NdebeleCA->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$NdebeleCA->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$NdebeleCA->add_edge_by_id("lexicoconstructionalConditioning", "multiple", "FILLER_POSITION");
$NdebeleCA->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$NdebeleCA->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$NdebeleCA->add_edge_by_id("arch", "component3", "KEYSTONE");
$NdebeleCA->add_edge_by_id("component3", "open1", "FILLEDNESS");
$NdebeleCA->add_edge_by_id("open1", "coherent1", "COHERENCE");
$NdebeleCA->add_edge_by_id("component3", "stable3", "STABILITY");
$NdebeleCA->add_edge_by_id("component3", "inelastic1", "ELASTICITY");
$NdebeleCA->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$NdebeleCA->add_edge_by_id("arch", "component1", "RIGHT_VOUSSOIR");
$NdebeleCA->add_edge_by_id("arch", "component2", "RIGHT_SUPPORT");
$NdebeleCA->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$NdebeleCA->add_edge_by_id("component4", "null1", "FILLEDNESS");
$NdebeleCA->add_edge_by_id("component4", "stable4", "STABILITY");
$NdebeleCA->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$NdebeleCA->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$NdebeleCA->add_edge_by_id("arch", "restkomponentenSet", "RESTKOMPONENTEN");
$NdebeleCA->add_edge_by_id("restkomponentenSet", "component5", "RESTKOMPONENT");
$NdebeleCA->add_edge_by_id("component5", "open2", "FILLEDNESS");
$NdebeleCA->add_edge_by_id("open2", "coherent2", "COHERENCE");
$NdebeleCA->add_edge_by_id("component5", "stable5", "STABILITY");
$NdebeleCA->add_edge_by_id("component5", "elastic3", "ELASTICITY");
$NdebeleCA->add_edge_by_id("elastic3", "MAXIMUM100-1", "MAXIMUM");
$NdebeleCA->add_edge_by_id("elastic3", "MINIMUM0-3", "MINIMUM");
$NdebeleCA->add_edge_by_id("arch", "component3", "LEFT_SUPPORT");
$templateGraphs{NdebeleCA} = $NdebeleCA;

my $SerboCroatianTopicalization = Graph->new(multiedged => 1);
$SerboCroatianTopicalization->set_graph_attribute("name", "SerboCroatianTopicalization");
$SerboCroatianTopicalization->add_edge_by_id("desmeme", "length", "STRICTURE");
$SerboCroatianTopicalization->add_edge_by_id("length", "prosodicWord", "CONSTITUENT");
$SerboCroatianTopicalization->add_edge_by_id("length", "COUNT2-1", "COUNT");
$SerboCroatianTopicalization->add_edge_by_id("desmeme", "prosodicConditioning", "CONDITIONING");
$SerboCroatianTopicalization->add_edge_by_id("desmeme", "potentiallyViolable", "VIOLABILITY");
$SerboCroatianTopicalization->add_edge_by_id("potentiallyViolable", "noKnownExceptions", "EXCEPTIONALITY");
$SerboCroatianTopicalization->add_edge_by_id("potentiallyViolable", "irreparable", "REPARABILITY");
$SerboCroatianTopicalization->add_edge_by_id("desmeme", "span", "FOUNDATION");
$SerboCroatianTopicalization->add_edge_by_id("span", "component1", "LEFT_SUPPORT");
$SerboCroatianTopicalization->add_edge_by_id("component1", "open1", "FILLEDNESS");
$SerboCroatianTopicalization->add_edge_by_id("open1", "coherent1", "COHERENCE");
$SerboCroatianTopicalization->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$SerboCroatianTopicalization->add_edge_by_id("elastic1", "MAXIMUM100-1", "MAXIMUM");
$SerboCroatianTopicalization->add_edge_by_id("elastic1", "MINIMUM1-1", "MINIMUM");
$SerboCroatianTopicalization->add_edge_by_id("component1", "stable1", "STABILITY");
$SerboCroatianTopicalization->add_edge_by_id("span", "component2", "RIGHT_SUPPORT");
$SerboCroatianTopicalization->add_edge_by_id("component2", "open2", "FILLEDNESS");
$SerboCroatianTopicalization->add_edge_by_id("open2", "coherent2", "COHERENCE");
$SerboCroatianTopicalization->add_edge_by_id("component2", "stable2", "STABILITY");
$SerboCroatianTopicalization->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$SerboCroatianTopicalization->add_edge_by_id("elastic2", "MAXIMUM100-2", "MAXIMUM");
$SerboCroatianTopicalization->add_edge_by_id("elastic2", "MINIMUM1-2", "MINIMUM");
$templateGraphs{SerboCroatianTopicalization} = $SerboCroatianTopicalization;

my $BantuCT = Graph->new(multiedged => 1);
$BantuCT->set_graph_attribute("name", "BantuCT");
$BantuCT->add_edge_by_id("desmeme", "order", "STRICTURE");
$BantuCT->add_edge_by_id("order", "simple", "RELATIONS");
$BantuCT->add_edge_by_id("order", "morphologicalConstituent", "CONSTITUENT");
$BantuCT->add_edge_by_id("order", "COUNT3-1", "COUNT");
$BantuCT->add_edge_by_id("desmeme", "lexicoconstructionalConditioning", "CONDITIONING");
$BantuCT->add_edge_by_id("lexicoconstructionalConditioning", "filledComponentSet", "FILLED_COMPONENTS");
$BantuCT->add_edge_by_id("filledComponentSet", "component1", "FILLED_COMPONENT");
$BantuCT->add_edge_by_id("component1", "elastic1", "ELASTICITY");
$BantuCT->add_edge_by_id("elastic1", "MAXIMUM1-1", "MAXIMUM");
$BantuCT->add_edge_by_id("elastic1", "MINIMUM0-1", "MINIMUM");
$BantuCT->add_edge_by_id("component1", "stable1", "STABILITY");
$BantuCT->add_edge_by_id("component1", "filled1", "FILLEDNESS");
$BantuCT->add_edge_by_id("filled1", "canonicalLineate1", "FORM");
$BantuCT->add_edge_by_id("filledComponentSet", "component2", "FILLED_COMPONENT");
$BantuCT->add_edge_by_id("component2", "filled2", "FILLEDNESS");
$BantuCT->add_edge_by_id("filled2", "canonicalLineate2", "FORM");
$BantuCT->add_edge_by_id("component2", "unstable1", "STABILITY");
$BantuCT->add_edge_by_id("unstable1", "right", "ASSOCIATE_POSITION");
$BantuCT->add_edge_by_id("unstable1", "component1", "ASSOCIATE");
$BantuCT->add_edge_by_id("component2", "elastic2", "ELASTICITY");
$BantuCT->add_edge_by_id("elastic2", "MAXIMUM1-2", "MAXIMUM");
$BantuCT->add_edge_by_id("elastic2", "MINIMUM0-2", "MINIMUM");
$BantuCT->add_edge_by_id("lexicoconstructionalConditioning", "final1", "FILLER_POSITION");
$BantuCT->add_edge_by_id("desmeme", "notViolable", "VIOLABILITY");
$BantuCT->add_edge_by_id("desmeme", "arch", "FOUNDATION");
$BantuCT->add_edge_by_id("arch", "component3", "KEYSTONE");
$BantuCT->add_edge_by_id("component3", "open1", "FILLEDNESS");
$BantuCT->add_edge_by_id("open1", "coherent1", "COHERENCE");
$BantuCT->add_edge_by_id("component3", "stable2", "STABILITY");
$BantuCT->add_edge_by_id("component3", "inelastic1", "ELASTICITY");
$BantuCT->add_edge_by_id("inelastic1", "COUNT1-1", "COUNT");
$BantuCT->add_edge_by_id("arch", "component2", "RIGHT_VOUSSOIR");
$BantuCT->add_edge_by_id("arch", "component1", "RIGHT_SUPPORT");
$BantuCT->add_edge_by_id("arch", "component4", "LEFT_VOUSSOIR");
$BantuCT->add_edge_by_id("component4", "null1", "FILLEDNESS");
$BantuCT->add_edge_by_id("component4", "stable3", "STABILITY");
$BantuCT->add_edge_by_id("component4", "inelastic2", "ELASTICITY");
$BantuCT->add_edge_by_id("inelastic2", "COUNT0-1", "COUNT");
$BantuCT->add_edge_by_id("arch", "component3", "LEFT_SUPPORT");
$templateGraphs{BantuCT} = $BantuCT;

my @templates = ("AghemClause", "BantuCA", "BantuCT", "BantuVCy", "ChechenPreverbalA", "ChichewaAR", "ChintangPrefixes", "EnglishPlural", "EnglishVP", "GermanClause", "MandeClause", "MeskwakiClause", "NdebeleCA", "NimboranVerb", "SerboCroatianJe", "SerboCroatianTopicalization", "TieneVerbProsodic", "TieneVerbSegments", "TurkishNominalMinimality", "TurkishVerbalMinimality");
my @templatesCopy = @templates;

open (NULL, '>FloodingSimilarities.txt');  #Erase file
my %seenPairs = { };
for my $templateName1 (@templates) {

	for my $templateName2 (@templatesCopy) {

		if ($seenPairs{$templateName2."/".$templateName1}) { next; }

		my $s = new GraphJG::SimilarityJG(graph => [$templateGraphs{$templateName1}, $templateGraphs{$templateName2}]);
		my $method = $s->use('SimilarityFlooding');
		$method->setNumOfIteration(100);
		$method->calculate();

		$method->getLargeSimilarities($templateName1,$templateName2);
	
		$seenPairs{$templateName1."/".$templateName2} = 1;
	
		}
	}
